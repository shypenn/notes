## [Learn Vimscript the Hard Way](http://learnvimscriptthehardway.stevelosh.com/)

@) mistakes 936 for utf-8;

@) .vim directory is named in 'vimfiles' in windows;

@) debug
 *) debug mode:
   * vim -D
   * :debug command
   * :breakadd 
	** no ':gui' command executed, startup debug doen't work properly;
 *) write log messag: 
    * `echom` & `:mes`
    * setqflist([{'text':'message'}])
    * setloclist(0, [{'text':'message'}])
  ** `echo` when only show at startup and in logfile.
  ** `echoerr` shows the first one.
 *) log verbosely:
 	vim -V9FILENAME.log file
 *) let &verbose=1
 *) show log: :message
 *) plugin specific;
 *) list loaded scripts:
  `:scriptnames`

@) list: []
@) dict: {}
@) call system command: `system`, `systemlist`
@) call inner functions in Ex: call fun()

@) when '~/.viminfo' is owned by root somehow, history doesn't work;

@) vim7.4 has invalid diffexpr=MyDiff() in _vimrc, comment it.

@) search help for function instead of 'Ex command':
 :h fun()

@) Ex command
 * `Q`
 * `gQ`
 * should not be used in expression;

@) when one of operands is float, float alrithematic is applied.

@) to check where are the options(textwidth/wrapmargin) set last:
:verbose set tw? wm?

@@ .in insert mode, ctrl+y copy the letter from above line(not in gvim);

@@ if file name includes space, escape it with \;

@@ set display=uhex		--show non-printable characters as value;
  set display=			--restore to normal;

@) set option(affect all buffers):
 *) set opt=val	(no variable can be used)
 *) let &opt=val (variable is valid)
 *) ++bin/nobin: this buffer;

@) show file name: ctrl+g
 *) full: 1+ctrl+g

@@ ga	-- show the value of the char under the cursor;

@) tag(ident: regex if starts with '/'):
 *) default tag file is: ./tags
	set tags=./tags,...
 *) go to: 
 	.) ctrl+]
	.) :tag ident
 *) next/prev match: :tn/tp
 *) go back: ctrl+t
 *) tag history: tags
 *) match list: 
	 .) :[s]ts[elect] [ident]
	 .) :tj[ump]: go if only;
	 .) g]
	 .) g ctl+]: go if only


@) regex:
 *) '*' is not magic; '\' is not neeeded;
 *) multiline: prepend '\_' to class char: '\_.', '\_s'

@@ g CTRL+g	-- show the position of cursor;

@@ 
1234gg 	--go to line;
1234go 	--go to byte;

@@ edit binary:
1)vim/gvim -b file
2)%!xxd

@@ :%!xxd 	/	:%!xxd -r
%: 1,$	-whole file;
!: filter througth external program;

@@ @:	-	repeat the last : command;
   @@	-	redo the last repeat;
   ;/,	-	repeat "finding character" forward/backward;
   .	-	repeat the last change;

@@ :n/p	-	next/previous file in arglist;

@@  encoding
 *) reparse: 
 	*) current buffer:	`:e ++enc=utf8`
 	*) all buffer:	`set enc=utf8`
 *) convert: w ++enc=utf8

@@ .edit command line:
C+p/n	-	show the prev/next command;
C+w/u	-	delete a word/all;
C+b/e	-	go to begin/end;
C/S+<left>	move one word left/right;
C+l	-	complete the longest unambiguous string;
C+D	-	list the completion matches;

@@ `command history` window
 *) open: 
  * q:
  * : Ctrl+f
 *) apply: ctrl+c -> enter
 *) close: ctrl+c twice

@) `search histroy` window (replace 'q' with '/' in that for command);

@@ .:history :
search a command history starting with :
C+P/N scroll up/down

@@ .:noh
clear the highlighting;

@@ .:%s/a/b/gi
% indicates in every line;
g: all occurence in those lines;
i/I: ignore/not ignore case;
e: suppress errors;
c: need confirmation;
@@ .\c  \C
find case-insensitive/sensitive; anywhere in the pattern: null->\cnull/null\c/nu\cll;
@@ .EOL
\n: when read
\r: when write
:s/\n/\r	this works;
@@ .:e
reload the file;
@@ . line no:
:se nu/nonu
@@ .replace in all files in the arglist;
:argdo %s/a/b/gec | update

@@ jump half page
ctrl+d/u

@@ jump line "displayed":
gj/k

@@ %
jump between two paired signs;

@@ o
switch between the beginning and end of a visual selected block;

@@ delete could be used combined with any commands that seeks a new position:
dfa:delete to the next "a";
d2b:delete 2 words backwards;
d/name: delete to the next "name";

@@ [N]enter:
move to the start of the next n line;

@@ U
redo the whole line;

@@ .ctrl+o/i
--previous/next location;

@@ .[num]J
join the next num lines together;

@@ .d$ = D;

@@ ctrl+a
all files start from the string;

@@ 0,10bw[ipe] is to really remove buffer;

@@ .
l	--letter
w	--word
)	--sentence
}	--paragraph

@@ .f/t char
place cursor to/before the next char(F/T reverse direction);



@@ .
pwd/cd are supported by vim internally;



@@  :new [file]/ctrl+w,n
--open a new window [open the file];


@@  buffer:
:e[dit] [file]
--open a new buffer [open the file] in the current window;

:ls/buffers
--list all buffers;

ctrl+6
--switch between list;

:b1
--switch to the buffer with index 1;
:bd1
--close buffer 1;

@@  window:
 *) vim -o/O file1 file2
open file1,file2 horizontally/vertically;

 *) ctrl+w hjkl:
move around windows;

 *) ctrl+w HJKLT
relocate the window to the most left/bottom/top/right/tabpage;


 *) ctrl+w [3] +/-/_/=:
increase/decrease(/maximize/eqaul) 3 lines(horizontally);

 *) :resize 12
set it to 12 lines height;

 *) ctrl+w [3] >/<:
increase/decrease 3 chars vertically;

 *) sp/vs:
open a new window horizontally/vertically with the same buffer;

 *) ctrl+w r
rotate the windows vertically(swap their positions);

 *) ctrl+w n/s/v
open

 *) ctrl+w c
close

@@  tabpage:
:tabe/tabc
edit/close a tab;

:tabn/gt
go to next tabpage

:tabp/tabN/gT
go to previous;

:tabs
list all tabpages with their windows;

ctrl+w T
move current window to a new tab;

open each file in args in a tab:
argdo tabe

:Te
explore in a new tab;

 *) open args in tabs: tab all;

@) search files by name:
:args

@@ switch from vertical split to horizontal split
Ctrl-W t	 makes the first (topleft) window current
Ctrl-W K	 moves the current window to full-width at the very top
Ctrl-W H     moves the current window to full-height at far left


@@ diff:
difft(his)		--add the current buffer to diff
diffoff			--opposite from above
diffsplit		--split the current window for diff horizontally;
vertical diffsplit		--split the current window for diff  vertically;
diffupdate		--update the display;
diffget/put [buf]		--copy buffer to each other; 'buf' is number of part of the buffer name;
[/]c			--prev/next difference;

@@ scroll windows at the same time:
"set scrollbind" on each window; or  "windo set scrollbind" for all;
"set noscrollbind" to turn off;

@@ search binary using code(more than one could be placed together):
\%d11		--	one byte decimal
\%o11		--	one byte octal
\%x11		--	one byte hex
\%u11aa		--	two bytes hex
\%U11aabbcc		--	four bytes hex

@) register
 *) set: let @r
 *) echo: echo @r
 *) write to buffer: put r

@) '=': expression register, following any expression;

@@ copy full name of current buffer to a register:
let @r = expand("%:p")

@@ escape "count" part:
\d\{1,2}

@@ xxd append 0d0a or 0a at the end of file.

@@ read option value set by "set":
set cindent?

@@ read variable value set by "let":
echo g:solarized_italic

@@) use the last search pattern: leave empty.
/
:s//subs/

@@) use the last substitute string: ~.
/~
:s/~/subs/

@@) include newline in wildcard: prepend "_"
\_.
\_w

@@) chars special by default:
. * \ [ ] ^ $

@@) chars special by escape:
+ ? | { } ( )

@) edit in/not in binary mode:
e ++bin
e ++nobin

@) search for null char:
/[\x0]


@) enter special char:
 in insert mode:  ctrl+q, nn, esc (nn: number, decimal without prefix, hex with prefix of 'u', octal with 'o').

@) execute external command of shell:
 :!calc

@) insert the command output after cursor:
 *) external: 
	:r !ipconfig
 *) internal: expression register("=):
 *) ex: redirect
 	
@) variable prefixes/namespace:
b:	  Local to the current buffer
w:	  Local to the current window
t:	  Local to the current tab pa
g:	  Global.
l:	  Local to a function.
s:	  Local to a |:source|'ed Vim
a:	  Function argument (only ins
v:	  Global, predefined by Vim.

@) hex to decimal:
:echo 0xff
 *) in insert mode, use expression register (=):
 ctrl+", =, 0xff

@) decimal to hex:
:echo printf('%x', 123)

@) xxd reverts back by counting 32 hex digit after the colon following address; 
 *) any number of single space/tab can appear in any position; 
	 except: 
	  1) placing together is invalid;
	  2) the space between the colon and the first digit can be either single one or none;
 *) any other chars can appear after the 32th digit;

@) input a list of sequential numbers (start line number can be add before 'put'):
 *) :put =map(range(1,150), 'printf(''%04d'', v:val)')
 *) :for i in range(1,10) | put ='192.168.0.'.i | endfor

@) look-ahead:
 *) positive => abc(?=123)
 	.) \vabc(123)@=
 	.) \vabc(\ze123)
 *) negative => abc(?!123)
 	.) \vabc(123)@!

@) look-behind:
 *) positive => (?<=123)abc
 	.) \v(123)@<=abc
 	.) \v(\zs123)abc
 *) negative => (?!123)abc
 	.) \v(123)@<!abc

@@) 
 a)store external command result to a register("@" sign)
:let @a = system("ls -l " . shellescape(expand('<cfile>')))

@) redirect js file output to vim:
1):command|vim-
2)set syntax=javascript

@)get char with code:
/\%d /\%x /\%o /\%u /\%U 

@) change file format:
 *) e ++ff=unix	-> change just display;
 *) set ff=unix	-> change eol

@) install a plugin:
 *) add dir to runtimepath;
 *) add doc by 'helptags';

@) redirect to file/register:
:redir > file
[:redir @a]
:echo 
:redir END

@) syntastic:
 *) enable debug info output:
 	let g:syntastic_debug=1/3/33
	:mes

@) set filetype(default in filetype.vim):
au BufNewFile,BufRead *.lmx set filetype=xml

@) change current working directory:
lcd	path		-> current window
cd	path		-> all windows

@) if 'cindent' is on, 'smartindent' is not used.

@) 'cinoptions=j1,J1' fixes this indent problem:
funcName(function(){
});

@) to prevent formatting when paste:
put *

@) set current directory to this file:
 cd/lcd %:p:h
%: file
:p full path
:h directory
 *) automatically:
 	**) set autochdir		-- may cause plugin problem;
	**) autocmd BufEnter * silent! lcd %:p:h
 *) expand('') may needed;

@)count items:
 *) :h count-items
 *) 'n' flag for substitute;

@) in netrw;
 *) gh: toggle hidden files;

@) when error occurs in syntax check app such as config file syntax error, no output at all, seems no error; 

@) recent files:
 *) list:	:ol[dfiles]
 *) edit:	:bro[wse] ol[dfiles]

@) vim version has to match with it of python;

@) modify macros recorded
 *) put it in buffer; **don't insert with register**
 *) then yank to register; **don't with 'yy'**
@) <leader> is backslash by default;
 *) override: `:let mapleader = ','`

@) wildignore to exclude files for vimgrep
@) vimg **/*.* doesn't include hidden file '.ext', adopt '.*';

@) high dpi:
:set gfn=Consolas:h12
# *) win:
#:set rop=type:directx

@) plugins run command by 'cmd /c command' in windows, if current directory contains file with the same name with extensions of script (.bat/.cmd/.js/.vb), which will be executed. (first instance, node.js)
 *) give extension explicitly in command: node.exe

@) set filetype when open:
 :edit +setf\ text file

@) :edit +exCmd: execute 'exCmd' after open;

@) set filetype for a specific file, append this modeline at the footer;
	// vim: set ft=text:

@) convert tab to spaces: retab
