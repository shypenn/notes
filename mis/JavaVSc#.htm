
<!-- saved from url=(0058)http://www.harding.edu/fmccown/java_csharp_comparison.html -->
<html><head><meta http-equiv="Content-Type" content="text/html; charset=windows-1252">
		<title>Java and C# Comparison</title>
		<meta http-equiv="Content-Language" content="en-us">
		
		<meta content="Java and C# Comparison" name="DESCRIPTION">
		<meta content="Java, C#, programming language comparison" name="keywords">
		<meta content="Frank McCown" name="author">
		<style> body {font-size:small; font-family: Tahoma; }
	td {font-size:x-small; padding-bottom:15px}
	
	.comment {color:green; font-style:italic}
	.heading { font-size: 20px; color: blue; padding-top: 5px; letter-spacing: 2pt; background-color: rgb(230,230,230) }
	.heading2 { font-weight: bold; FONT-SIZE: 16px; color: black; padding-top: 5px; letter-spacing: 2pt; BACKGROUND-COLOR: rgb(230,230,230) }
table.header { background-color: rgb(230,230,230) }
		</style>
	</head>
	<body>
<p align="center"><font color="#ff0000" size="6">Java and C# Comparison</font><br>
  <font size="-2">This is a quick reference guide to highlight some key syntactical 
  differences between Java and C#. <br>This is not a complete overview of either language. Hope you find this useful!
<br>Also see <a href="http://www.harding.edu/fmccown/vbnet_csharp_comparison.html">VB.NET and C# Comparison</a>.</font> </p>
  
  <br>
		<br>
		<div style="border-right: rgb(200,200,200) 2px solid; border-top: rgb(200,200,200) 2px solid; BORDER-LEFT: rgb(200,200,200) 2px solid; BORDER-BOTTOM: rgb(200,200,200) 2px solid">
			<table id="menutable" bordercolor="gainsboro" cellspacing="1" cellpadding="0" width="600" align="center" border="0">
				<tbody><tr valign="top">
					<td width="23%">
                                            <a href="http://www.harding.edu/fmccown/java_csharp_comparison.html#program">Program Structure</a>
                                            <br>
                                            <a href="http://www.harding.edu/fmccown/java_csharp_comparison.html#comments">Comments</a>
						<br>
						<a href="http://www.harding.edu/fmccown/java_csharp_comparison.html#datatypes">Data Types</a>
						<br>
						<a href="http://www.harding.edu/fmccown/java_csharp_comparison.html#constants">Constants</a>
						<br>
						<a href="http://www.harding.edu/fmccown/java_csharp_comparison.html#enumerations">Enumerations</a>
						<br>
						<a href="http://www.harding.edu/fmccown/java_csharp_comparison.html#operators">Operators</a>
					</td>
					<td width="23%"><a href="http://www.harding.edu/fmccown/java_csharp_comparison.html#choices">Choices</a>
						<br>
						<a href="http://www.harding.edu/fmccown/java_csharp_comparison.html#loops">Loops</a>
						<br>
						<a href="http://www.harding.edu/fmccown/java_csharp_comparison.html#arrays">Arrays</a>
						<br>
						<a href="http://www.harding.edu/fmccown/java_csharp_comparison.html#functions">Functions</a>
						<br>
						<a href="http://www.harding.edu/fmccown/java_csharp_comparison.html#strings">Strings</a>
					</td>
					<td width="31%">
						<a href="http://www.harding.edu/fmccown/java_csharp_comparison.html#exceptionhandling">Exception Handling</a>
						<br>
					<a href="http://www.harding.edu/fmccown/java_csharp_comparison.html#namespaces">Namespaces</a>
						<br>
						<a href="http://www.harding.edu/fmccown/java_csharp_comparison.html#classesinterfaces">Classes / Interfaces</a>
						<br>
						<a href="http://www.harding.edu/fmccown/java_csharp_comparison.html#constructorsdestructors">Constructors / Destructors</a>
						<br>
						<a href="http://www.harding.edu/fmccown/java_csharp_comparison.html#objects">Objects</a>
	
					</td>
					<td width="25%"><a href="http://www.harding.edu/fmccown/java_csharp_comparison.html#properties">Properties</a>
						<br>
						<a href="http://www.harding.edu/fmccown/java_csharp_comparison.html#structs">Structs</a>
						<br>
						<a href="http://www.harding.edu/fmccown/java_csharp_comparison.html#consoleio">Console I/O</a>
						<br>
						<a href="http://www.harding.edu/fmccown/java_csharp_comparison.html#fileio">File I/O</a>
						<br>
					</td>
				</tr>
			</tbody></table>
		</div>
		<br>
		<br>
		
		<table height="2742" width="100%" border="0">
			
                        <tbody><tr align="center"><td colspan="2">
                            <table class="header" id="Table2" width="100%" border="0">
						<tbody><tr align="center">
							<td class="heading2" width="20%">Java</td>
							<td class="heading" width="60%"><a name="program"></a>Program Structure</td>
							<td class="heading2" width="20%">C#</td>
						</tr>
					</tbody></table>
                        </td></tr>
                        
                        <tr>
                        
                            <td>
					
					package hello;<br>
                                        <br>
					public class HelloWorld {<br>
					&nbsp;&nbsp; public static void <strong>main</strong>(String[] args) {<br>
					&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; String name = "Java";<br>
					<br>
					&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span class="comment">// See if an 
						argument was passed from the command line</span><br>
					&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (args.length == 1)<br>
					&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; name = args[0];<br>
					<br>
					&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; System.out.println("Hello, " + name 
					+ "!");<br>
					&nbsp;&nbsp;&nbsp; }<br>
				    
					}
			    </td>
                        
                            <td>using System;
					<br>
					<br>
					namespace Hello {<br>
					&nbsp;&nbsp; public class HelloWorld {<br>
					&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public static void <strong>Main</strong>(string[] 
					args) {<br>
					&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; string name = "C#";<br>
					<br>
					&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span class="comment">// See if an 
						argument was passed from the command line</span><br>
					&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (args.Length == 1)<br>
					&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; name = args[0];<br>
					<br>
					&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Console.WriteLine("Hello, " + name 
					+ "!");<br>
					&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br>
					&nbsp;&nbsp; }<br>
					}
			    </td>    
                        </tr>
			<tr align="center">
				
    <td colspan="2">
					<table class="header" id="Table2" width="100%" border="0">
						<tbody><tr align="center">
							<td class="heading2" width="20%">Java</td>
							<td class="heading" width="60%"><a name="comments"></a>Comments</td>
							<td class="heading2" width="20%">C#</td>
						</tr>
					</tbody></table>
				</td>
			</tr>
			<tr>
				<td><span class="comment">// Single line</span><br>
					<span class="comment">/* Multiple<br>
						&nbsp;&nbsp;&nbsp; line&nbsp; */</span><br>
					<span class="comment">/** Javadoc documentation comments */</span></td>
				<td><span class="comment">// Single line</span><br>
					<span class="comment">/* Multiple<br>
						&nbsp;&nbsp;&nbsp; line&nbsp; */</span><br>
					<span class="comment">/// XML comments on a single line<br>
						/** XML comments on multiple lines */</span></td>
			</tr>
			<tr align="center">
				 <td colspan="2">
					<table class="header" id="Table3" width="100%" border="0">
						<tbody><tr align="center">
							<td class="heading2" width="20%">Java</td>
							<td class="heading" width="60%"><a name="datatypes"></a>Data Types</td>
							<td class="heading2" width="20%">C#</td>
						</tr>
					</tbody></table>
				</td>
			</tr>
			<tr valign="top">
				<td>
					<p><span class="comment">Primitive Types</span><br>
						boolean<br>
						byte<br>
						char<br>
						short, int, long<br>
						float, double</p>
					<p><span class="comment"><br>
							Reference Types</span><br>
						Object&nbsp;&nbsp; <span class="comment">(superclass of all other classes)</span><br>
						String<br>
						<em>arrays, classes, interfaces</em></p>
					<p><span class="comment">Conversions</span>
					</p>
					<p><span class="comment">// int to String</span>
						<br>
						int x = 123;
						<br>
						String y = Integer.toString(x);&nbsp; <span class="comment">// y is "123"</span></p>
					<p><span class="comment">// String to int</span><br>
						y = "456";&nbsp;<br>
						x = Integer.parseInt(y);&nbsp;&nbsp; <span class="comment">// x is 456</span></p>
					<p><span class="comment">//&nbsp;double to int</span><br>
						double z = 3.5;
						<br>
						x = <strong>(int)</strong> z;&nbsp;&nbsp; <span class="comment">// x 
							is&nbsp;3&nbsp; (truncates decimal)</span></p>
				</td>
				<td>
					<p><span class="comment">Value Types</span><br>
						bool<br>
						byte, sbyte<br>
						char<br>
						short, ushort, int, uint, long, ulong<br>
						float, double, decimal<br>
						<em>structures, enumerations</em></p>
					<p><span class="comment">Reference Types</span><br>
						object&nbsp;&nbsp;&nbsp; <span class="comment">(superclass of all other classes)</span><br>
						string<br>
						<em>arrays, classes, interfaces, delegates</em></p>
					<p><span class="comment">Convertions</span></p>
					<p><span class="comment">// int to string</span>
						<br>
						int x = 123;
						<br>
						String y = x.ToString();&nbsp; <span class="comment">// y is "123"</span></p>
					<p><span class="comment">// string to int</span><br>
						y = "456";
						<br>
						x = int.Parse(y);&nbsp;&nbsp; <span class="comment">// or x = Convert.ToInt32(y);</span></p>
					<p><span class="comment">//&nbsp;double to int</span><br>
						double z = 3.5;
						<br>
						x = <strong>(int)</strong> z;&nbsp;&nbsp; <span class="comment">//&nbsp;x 
							is&nbsp;3&nbsp; (truncates decimal)</span></p>
				</td>
			</tr>
			<tr align="center">
				<td colspan="2">
					<table class="header" id="Table4" width="100%" border="0">
						<tbody><tr align="center">
							<td class="heading2" width="20%">Java</td>
							<td class="heading" width="60%"><a name="constants"></a>Constants</td>
							<td class="heading2" width="20%">C#</td>
						</tr>
					</tbody></table>
				</td>
			</tr>
			<tr valign="top">
				<td>
					<span class="comment">// May be initialized in a constructor </span>
					<br><strong>final</strong> double PI = 3.14;
										
				</td>
				<td><strong>const</strong> double PI = 3.14;
					<p>
					<span class="comment">// Can be set to a const or a variable. May be initialized in a constructor. </span><br>
					<b>readonly</b> int MAX_HEIGHT = 9;
					
					</p>
				</td>
			</tr>
			<tr align="center">
				<td colspan="2">
					<table class="header" id="Table20" width="100%" border="0">
						<tbody><tr align="center">
							<td class="heading2" width="20%">Java</td>
							<td class="heading" width="60%"><a name="enumerations"></a>Enumerations</td>
							<td class="heading2" width="20%">C#</td>
						</tr>
					</tbody></table>
				</td>
			</tr>
			<tr valign="top">
				
    <td><p> <strong>enum</strong> Action {Start, Stop, Rewind, Forward};</p>
      <p><span class="comment">// Special type of class </span><br>
        <strong>enum</strong> Status {<br>
        &nbsp; Flunk(50), Pass(70), Excel(90);<br>
        &nbsp; private final int value;<br>
        &nbsp; Status(int value) { this.value = value; }<br>
        &nbsp; public int value() { return value; } <br>
        }; </p>
      <p>Action a = Action.Stop;<br>
        if (a != Action.Start)<br>
        &nbsp; System.out.println(a);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
        <span class="comment">// Prints "Stop"</span><br>
        <br>
        Status s = Status.Pass;<br>
        System.out.println(s.value()); <span class="comment">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// 
        Prints "70" </span></p></td>
				<td><p><strong>enum</strong> Action {Start, Stop, Rewind, Forward};</p>
      <p><strong>enum</strong> Status {Flunk = 50, Pass = 70, Excel = 90};<br>
      </p>
      <p><span class="comment">No equivalent.</span><br>
        <br>
        <br>
        <br>
        <br>
        <br>
        Action a = Action.Stop;<br>
        if (a != Action.Start)<br>
        &nbsp; Console.WriteLine(a);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span class="comment">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// 
        Prints "Stop"</span></p>
      <p> Status s = Status.Pass;<br>
        Console.WriteLine((int) s); <span class="comment">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// 
        Prints "70"</span></p>
      </td>
			</tr>
			<tr align="center">
				<td colspan="2">
					<table class="header" id="Table5" width="100%" border="0">
						<tbody><tr align="center">
							<td class="heading2" width="20%">Java</td>
							<td class="heading" width="60%"><a name="operators"></a>Operators</td>
							<td class="heading2" width="20%">C#</td>
						</tr>
					</tbody></table>
				</td>
			</tr>
			<tr valign="top">
				<td height="16">
					<p><span class="comment">Comparison</span><br>
						==&nbsp; &lt;&nbsp; &gt;&nbsp; &lt;=&nbsp; &gt;=&nbsp; !=</p>
					<p><span class="comment">Arithmetic</span><br>
						+&nbsp; -&nbsp; *&nbsp; /<br>
						%&nbsp; <span class="comment">(mod)</span><br>
						/&nbsp;&nbsp; <span class="comment">(integer division if both operands are ints)</span><br>
						Math.Pow(x, y)</p>
					<p><span class="comment">Assignment</span><br>
						=&nbsp; +=&nbsp; -= &nbsp;*=&nbsp; /= &nbsp; %= &nbsp; &amp;=&nbsp; |=&nbsp; 
						^=&nbsp; &lt;&lt;=&nbsp; &gt;&gt;=&nbsp; &gt;&gt;&gt;=&nbsp; ++&nbsp; --</p>
					<p><span class="comment">Bitwise</span><br>
						&amp; &nbsp;| &nbsp;^&nbsp;&nbsp;&nbsp;~&nbsp; &lt;&lt;&nbsp; &gt;&gt;&nbsp; 
						&gt;&gt;&gt;</p>
					<p><span class="comment">Logical</span><br>
						&amp;&amp;&nbsp; ||&nbsp;&nbsp;&amp;&nbsp; | &nbsp; ^ &nbsp; !</p>
					<p><strong>Note:</strong> &amp;&amp; and&nbsp;||&nbsp;perform short-circuit logical 
						evaluations</p>
					<p><span class="comment">String Concatenation</span><br>
						+</p>
				</td>
				<td height="16">
					<p><span class="comment">Comparison</span><br>
						==&nbsp; &lt;&nbsp; &gt;&nbsp; &lt;=&nbsp; &gt;=&nbsp; !=</p>
					<p><span class="comment">Arithmetic</span><br>
						+&nbsp; -&nbsp; *&nbsp; /<br>
						%&nbsp; <span class="comment">(mod)</span><br>
						/&nbsp;&nbsp; <span class="comment">(integer division if both operands are ints)</span><br>
						Math.Pow(x, y)</p>
					<p><span class="comment">Assignment</span><br>
						=&nbsp; +=&nbsp; -= &nbsp;*=&nbsp; /= &nbsp; %=&nbsp; &amp;=&nbsp; |=&nbsp; 
						^=&nbsp; &lt;&lt;=&nbsp; &gt;&gt;=&nbsp; ++&nbsp; --</p>
					<p><span class="comment">Bitwise</span><br>
						&amp; &nbsp;| &nbsp;^&nbsp;&nbsp;&nbsp;~&nbsp; &lt;&lt;&nbsp; &gt;&gt;</p>
					<p><span class="comment">Logical</span><br>
						&amp;&amp;&nbsp; ||&nbsp;&nbsp;&amp;&nbsp; | &nbsp; ^ &nbsp; !</p>
					<p><strong>Note:</strong> &amp;&amp; and&nbsp;||&nbsp;perform short-circuit logical 
						evaluations</p>
					<p><span class="comment">String Concatenation</span><br>
						+</p>
				</td>
			</tr>
			
			<tr>
					<td colspan="2">
					<table class="header" id="Table6" width="100%" border="0">
						<tbody><tr align="center">
							<td class="heading2" width="20%">Java</td>
							<td class="heading" width="60%"><a name="choices"></a>Choices</td>
							<td class="heading2" width="20%">C#</td>
						</tr>
					</tbody></table>
				</td>
			</tr>
			<tr valign="top">
				<td height="163">
					<p>greeting = age &lt; 20 <strong>?</strong> "What's up?" <strong>:</strong> "Hello";</p>
					<p><strong>if </strong>(x &lt; y)
						<br>
						&nbsp; System.out.println("greater");</p>
					<p><strong>if </strong>(x != 100) {&nbsp;&nbsp;&nbsp;
						<br>
						&nbsp; x *= 5;
						<br>
						&nbsp; y *= 2;
						<br>
						}
						<br>
						<strong>else</strong>
						<br>
						&nbsp; z *= 6;</p>
					<p>int selection = 2;<br>
        <strong>switch</strong> (selection)&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp; <font color="#008000"> 
        <i>// Must be byte, short, int, char, or enum</i></font><br>
						&nbsp; <strong>case</strong> 1: 
						x++;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <font color="#008000">
							<i>// Falls through to next case if no break</i></font><br>
						&nbsp; <strong>case</strong> 2: y++;&nbsp;&nbsp; <strong>break;</strong>
						<br>
						&nbsp; <strong>case</strong> 3: z++;&nbsp;&nbsp; <strong>break;</strong>
						<br>
						&nbsp; <strong>default:</strong> other++;<br>
						}
					</p>
				</td>
				<td height="163">
					<p>greeting = age &lt; 20 <strong>?</strong> "What's up?" <strong>:</strong> "Hello";</p>
					<p><strong>if </strong>(x &lt; y)&nbsp;
						<br>
						&nbsp; Console.WriteLine("greater");</p>
					<p><strong>if </strong>(x != 100) {&nbsp;&nbsp;&nbsp;
						<br>
						&nbsp; x *= 5;
						<br>
						&nbsp; y *= 2;
						<br>
						}
						<br>
						<strong>else</strong>
						<br>
						&nbsp; z *= 6;<br>
						<br>
						string color = "red";<br>
						<strong>switch</strong> (color)&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
						<i><font color="#008000">// Can be any predefined type</font></i><br>
						&nbsp; <strong>case</strong> "red":&nbsp;&nbsp;&nbsp; r++;&nbsp;&nbsp;&nbsp; <strong>
							break;</strong> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <font color="#008000"><i>// break is 
								mandatory; no fall-through</i></font><br>
						&nbsp; <strong>case</strong> "blue":&nbsp;&nbsp; b++;&nbsp;&nbsp; <strong>break;</strong>
						<br>
						&nbsp; <strong>case</strong> "green": g++;&nbsp;&nbsp; <strong>break;</strong>
						<br>
						&nbsp; <strong>default:</strong>&nbsp;other++;&nbsp;&nbsp;&nbsp; &nbsp;<strong>break;</strong>
						&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <font color="#008000"><i>// break necessary on default</i></font><br>
						}
					</p>
				</td>
			</tr>
			
						<tr>
				<td colspan="2">
					<table class="header" id="Table7" width="100%" border="0">
						<tbody><tr align="center">
							<td class="heading2" width="20%">Java</td>
							<td class="heading" width="60%"><a name="loops"></a>Loops</td>
							<td class="heading2" width="20%">C#</td>
						</tr>
					</tbody></table>
				</td>
			</tr>
			<tr valign="top">
				<td height="259">
					<p><strong>while</strong> (i &lt; 10)
						<br>
						&nbsp; i++;<br>
						<br>
        <strong>for</strong> (i = 2; i &lt;= 10; i += 2)&nbsp;<br>
						&nbsp; System.out.println(i);</p>
					
      <p><strong>do</strong> <br>
        &nbsp; i++; <br>
        <strong>while</strong> (i &lt; 10);</p>
					
      <p> <b>for</b> (int i <b>:</b> numArray)&nbsp; <span class="comment">// 
        foreach construct</span>&nbsp; <br>
						&nbsp; sum += i;</p>
					
      <p><span class="comment">// for loop can be used to iterate through any 
        Collection</span><br>
						import java.util.ArrayList;<br>
						ArrayList&lt;Object&gt; list = new ArrayList&lt;Object&gt;();<br>
						list.add(10);&nbsp;&nbsp; &nbsp;<span class="comment">// boxing converts to 
							instance of Integer</span><br>
						list.add("Bisons");<br>
						list.add(2.3);&nbsp;&nbsp;&nbsp; <span class="comment">// boxing converts to 
							instance of Double</span><br>
						<br>
						<b>for</b> (Object o <b>:</b> list)<br>&nbsp; 
						System.out.println(o);
					</p>
				</td>
				<td valign="top" height="259">
					<p><strong>while</strong> (i &lt; 10)
						<br>
						&nbsp; i++;<br>
						<br>
						<strong>for</strong> (i = 2; i &lt;= 10; i += 2)
						<br>
						&nbsp; Console.WriteLine(i);</p>
					
      <p><strong>do</strong> <br>
        &nbsp; i++; <br>
        <strong>while</strong> (i &lt; 10);</p>
					
      <p> <strong>foreach</strong> (int i <strong>in</strong> numArray)&nbsp; 
        <br>
						&nbsp; sum += i;</p>
					<p><font color="#008000"><i>// foreach can be used to iterate through any 
								collection</i></font>&nbsp;<br>
						using System.Collections;<br>
						ArrayList list = new ArrayList();<br>
						list.Add(10);<br>
						list.Add("Bisons");<br>
						list.Add(2.3);<br>
						<br>
						<strong>foreach</strong> (Object o <strong>in</strong> list)<br>
						&nbsp; Console.WriteLine(o);</p>
				</td>
			</tr>
			
						<tr>
				<td colspan="2">
					<table class="header" id="Table8" width="100%" border="0">
						<tbody><tr align="center">
							<td class="heading2" width="20%">Java</td>
							<td class="heading" width="60%"><a name="arrays"></a>Arrays</td>
							<td class="heading2" width="20%">C#</td>
						</tr>
					</tbody></table>
				</td>
			</tr>
			<tr valign="top">
				<td height="144">int nums<strong>[]</strong> =&nbsp;{1, 2, 3};&nbsp;&nbsp; <font color="#008000">
						<i>or</i></font>&nbsp;&nbsp; int<strong>[]</strong> nums = {1, 2, 3};<br>
					for (int i = 0; i &lt; nums.length; i++)<br>
					&nbsp; System.out.println(nums[i]);<br>
					<br>
					String names[] = new String[5];<br>
					names[0] = "David";<br>
					<br>
					float twoD<strong>[][]</strong> = new float[rows][cols];<br>
					twoD[2][0] = 4.5;
					<p>
						int<strong>[][]</strong> jagged = new int[5][];
						<br>
						jagged[0] = new int[5];
						<br>
						jagged[1] = new int[2];
						<br>
						jagged[2] = new int[3];
						<br>
						jagged[0][4] = 5;
					</p>
				</td>
				<td height="144">int<strong>[]</strong> nums = {1, 2, 3};<br>
					for (int i = 0; i &lt; nums.Length; i++)<br>
					&nbsp; Console.WriteLine(nums[i]);<br>
					<br>
					string[] names = new string[5];<br>
					names[0] = "David";<br>
					<br>
					float<strong>[,]</strong> twoD = new float[rows, cols];<br>
					twoD[2,0] = 4.5f;
					<p>int<strong>[][]</strong> jagged = new int[3][] {<br>
						&nbsp; &nbsp; new int[5], new int[2], new int[3] };
						<br>
						jagged[0][4] = 5;
					</p>
				</td>
			</tr>
			
			<tr><td colspan="2">
					<table class="header" id="Table9" width="100%" border="0">
						<tbody><tr align="center">
							<td class="heading2" width="20%">Java</td>
							<td class="heading" width="60%"><a name="functions"></a>Functions</td>
							<td class="heading2" width="20%">C#</td>
						</tr>
					</tbody></table>
				</td>
			</tr><tr valign="top">
				<td width="50%">
					<table cellpadding="0" border="0" width="100%">
						<tbody><tr valign="top">
							<td width="50%">
								<span class="comment">// Return single value</span><br>
								<strong>int</strong> Add(int x, int y) {
								<br>
								&nbsp;&nbsp; <strong>return</strong> x + y;
								<br>
            } 
            <p> int sum = Add(2, 3); </p>
							</td>
							<td width="50%">
								<span class="comment">// Return no value</span><br>
								<strong>void</strong> PrintSum(int x, int y) {
								<br>
								&nbsp;&nbsp; System.out.println(x + y);
								<br>
								}
								
            <p> PrintSum(2, 3);&nbsp;</p>
							</td>
						</tr>
					</tbody></table>
					<p><span class="comment">// Primitive types and references are always passed by value<br>
						</span>void TestFunc(int x, Point p) {<br>
						&nbsp;&nbsp;&nbsp;x++;
						<br>
						&nbsp;&nbsp; p.x++;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span class="comment">// 
							Modifying property of the object</span><br>
						&nbsp;&nbsp; p = null;&nbsp;&nbsp;&nbsp; <span class="comment">// Remove local 
							reference to object</span>
						<br>
						}
					</p>
					<p>class Point {
						<br>
						&nbsp;&nbsp; public int x, y;
						<br>
						}</p>
					
      <p>Point p = new Point(); <br>
        p.x = 2; <br>
        int a = 1; <br>
        TestFunc(a, p);<br>
        System.out.println(a + " " + p.x + " " + (p == null) );&nbsp; <span class="comment"> 
        // 1 3 false</span> <br>
        <br>
        <br>
        <br>
        <br>
      
      </p><p><span class="comment">// Accept variable number of arguments</span><br>
        int Sum(int <strong>...</strong> nums) {<br>
        &nbsp; int sum = 0;<br>
        &nbsp; for (int i : nums)<br>
        &nbsp; &nbsp; sum += i;<br>
        &nbsp; return sum;<br>
        } </p>
      <p>int total = Sum(4, 3, 2, 1);&nbsp;&nbsp; <span class="comment">// returns 
        10</span></p>
					</td>
				<td width="50%">
					<table cellpadding="0" border="0" width="100%" id="Table1">
						<tbody><tr valign="top">
							<td width="50%">
								<span class="comment">// Return single value</span><br>
								<strong>int</strong> Add(int x, int y) {
								<br>
								&nbsp;&nbsp; <strong>return</strong> x + y;
								<br>
            } 
            <p> int sum = Add(2, 3); </p>
							</td>
							<td width="50%">
								<span class="comment">// Return no value</span><br>
								<strong>void</strong> PrintSum(int x, int y) {
								<br>
								&nbsp;&nbsp; Console.WriteLine(x + y);
								<br>
								}
								
            <p> PrintSum(2, 3);&nbsp;</p>
							</td>
						</tr>
					</tbody></table>
					<p><span class="comment">// Pass by value (default), in/out-reference (ref), and 
							out-reference (out)</span>
						<br>
						void TestFunc(int x, <strong>ref</strong> int y, <strong>out</strong> int z, 
						Point p1, <strong>ref</strong> Point p2) {
						<br>
						&nbsp;&nbsp; x++;&nbsp; y++;&nbsp; z = 5;
						<br>
						&nbsp;&nbsp; p1.x++;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span class="comment">// 
							Modifying property of the object</span> &nbsp;&nbsp;&nbsp;&nbsp;
						<br>
						&nbsp;&nbsp; p1 = null;&nbsp; &nbsp; <span class="comment">// Remove local 
							reference to object</span>
						<br>
						&nbsp;&nbsp; p2 = null;&nbsp;&nbsp; <span class="comment">// Free the object</span>
						<br>
						}</p>
					<p>class Point {
						<br>
						&nbsp;&nbsp; public int x, y;
						<br>
						}</p>
					<p>Point p1 = new Point();
						<br>
						Point p2 = new Point();
						<br>
						p1.x = 2;
						<br>
						int a = 1, b = 1, c;&nbsp;&nbsp; <span class="comment">// Output param doesn't need 
							initializing</span>
						<br>
						TestFunc(a, <strong>ref</strong> b, <strong>out</strong> c, p1, <strong>ref</strong>
						p2);
						<br>
						Console.WriteLine("{0} {1} {2} {3} {4}",
						<br>
						&nbsp;&nbsp; a, b, c, p1.x, p2 == null); &nbsp; <span class="comment">// 1 2 5 3 
							True</span></p>
					<p><span class="comment">// Accept variable number of arguments</span><br>
						int Sum(<strong>params</strong> int[] nums) {<br>
						&nbsp; int sum = 0;<br>
						&nbsp; foreach (int i in nums)<br>
						&nbsp;&nbsp;&nbsp; sum += i;<br>
						&nbsp; return sum;<br>
						}</p>
					
      <p>int total = Sum(4, 3, 2, 1);&nbsp;&nbsp; <font color="#008000"><i>// 
        returns 10</i></font></p>
					</td>
			</tr>
			
			<tr>

				<td colspan="2">
					<table class="header" id="Table10" width="100%" border="0">
						<tbody><tr align="center">
							<td class="heading2" width="20%">Java</td>
							<td class="heading" width="60%"><a name="strings"></a>Strings</td>
							<td class="heading2" width="20%">C#</td>
						</tr>
					</tbody></table>
				</td>
			</tr>
			<tr valign="top">
				<td>
					<p><span class="comment">// String concatenation</span><br>
						<strong>String</strong> school = "Harding ";
						<br>
						school = school + "University";&nbsp;&nbsp; <span class="comment">// school is 
							"Harding University"</span></p>
					<p><span class="comment">// String comparison</span><br>
						String&nbsp;mascot = "Bisons";
						<br>
						if (mascot == "Bisons")&nbsp;&nbsp; &nbsp;<span class="comment">//&nbsp;Not the 
							correct way to do string comparisons</span><br>
						if (mascot.<strong>equals</strong>("Bisons"))&nbsp;&nbsp; <span class="comment">// 
							true</span><br>
						if (mascot.<strong>equalsIgnoreCase</strong>("BISONS"))&nbsp;&nbsp; <span class="comment">
							// true</span><br>
						if (mascot.<strong>compareTo</strong>("Bisons") == 0)&nbsp;&nbsp; <span class="comment">
							// true</span></p>
					
      <p>System.out.println(mascot.<strong>substring</strong>(2, 5));&nbsp;&nbsp; 
        <span class="comment"> // Prints "son"</span></p>
      <p><span class="comment">// My birthday: Oct 12, 1973</span><br>
        java.util.Calendar c = new java.util.GregorianCalendar(1973, 10, 12);<br>
        String s = String.format("My birthday: %1$tb %1$te, %1$tY", 
        c);</p>
					<p><span class="comment">// Mutable string</span>
						<br>
						<strong>StringBuffer</strong> buffer = new <strong>StringBuffer</strong>("two 
						");
						<br>
						buffer.<strong>append</strong>("three ");
						<br>
						buffer.<strong>insert</strong>(0, "one ");
						<br>
						buffer.<strong>replace</strong>(4, 7, "TWO");
						<br>
						System.out.println(buffer);&nbsp;&nbsp;&nbsp;&nbsp; <span class="comment">// Prints 
							"one TWO three"</span></p>
				</td>
				<td>
					<p><span class="comment">// String concatenation</span><br>
						<strong>string</strong> school = "Harding ";
						<br>
						school = school + "University";&nbsp;&nbsp; <span class="comment">// school is 
							"Harding University"</span></p>
					<p><span class="comment">// String comparison</span><br>
						string&nbsp;mascot = "Bisons";
						<br>
						if (mascot == "Bisons")&nbsp; &nbsp; <span class="comment">// true</span><br>
						if (mascot.<strong>Equals</strong>("Bisons"))&nbsp; &nbsp;<span class="comment">// 
							true</span><br>
						if (mascot.<strong>ToUpper</strong>().<strong>Equals</strong>("BISONS"))&nbsp;&nbsp;
						<span class="comment">// true</span><br>
						if (mascot.<strong>CompareTo</strong>("Bisons") == 0)&nbsp;&nbsp;&nbsp; <span class="comment">
							// true</span></p>
					
      <p>Console.WriteLine(mascot.<strong>Substring</strong>(2, 3));&nbsp;&nbsp;&nbsp; 
        <span class="comment"> // Prints "son"</span></p>
      <p><span class="comment">// My birthday: Oct 12, 1973</span><br>
        DateTime dt = new DateTime(1973, 10, 12);<br>
        string s = "My birthday: " + dt.ToString("MMM dd, yyyy"); 
      </p>
					<p><span class="comment">// Mutable string</span>
						<br>
						System.Text.<strong>StringBuilder</strong> buffer = new System.Text.<strong>StringBuilder</strong>("two 
						");
						<br>
						buffer.<strong>Append</strong>("three ");
						<br>
						buffer.<strong>Insert</strong>(0, "one ");
						<br>
						buffer.<strong>Replace</strong>("two", "TWO");
						<br>
						Console.WriteLine(buffer);&nbsp;&nbsp;&nbsp;&nbsp; <span class="comment">// Prints 
							"one TWO three"</span></p>
				</td>
			</tr>
			<tr>
				<td colspan="2">
					<table class="header" id="Table11" width="100%" border="0">
						<tbody><tr align="center">
							<td class="heading2" width="20%">Java</td>
							<td class="heading" width="60%"><a name="exceptionhandling"></a>Exception Handling</td>
							<td class="heading2" width="20%">C#</td>
						</tr>
					</tbody></table>
				</td>
			</tr>
			<tr valign="top">
				<td height="96">
					<p><span class="comment">// Must be in a method&nbsp;that is declared to throw this 
							exception</span><br>
						Exception ex = new Exception("Something is really wrong.");
						<br>
						<strong>throw</strong> ex;&nbsp;&nbsp;</p>
					<p><strong>try</strong> {<br>
						&nbsp; y = 0;
						<br>
						&nbsp; x = 10 / y;<br>
						} <strong>catch</strong> (Exception ex) {<br>
						&nbsp; System.out.println(ex.getMessage());&nbsp;<br>
						} <strong>finally</strong> {<br>
						&nbsp; <span class="comment">// Code that always gets executed</span><br>
						}
					</p>
				</td>
				<td>
					<p>Exception up = new Exception("Something is really wrong.");
						<br>
						<strong>throw</strong> up;&nbsp; <span class="comment">// ha ha </span>
					</p>
					<p><strong><br>
							try</strong> {<br>
						&nbsp; y = 0;
						<br>
						&nbsp; x = 10 / y;<br>
						} <strong>catch</strong> (Exception ex) {&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span class="comment">
							// Variable "ex" is optional</span><br>
						&nbsp; Console.WriteLine(ex.Message);
						<br>
						} <strong>finally</strong> {<br>
						&nbsp; <span class="comment">// Code that always gets executed</span><br>
						}
					</p>
				</td>
			</tr>
			
						<tr>
				<td colspan="2">
					<table class="header" id="Table12" width="100%" border="0">
						<tbody><tr align="center">
							<td class="heading2" width="20%">Java</td>
							<td class="heading" width="60%"><a name="namespaces"></a>Namespaces</td>
							<td class="heading2" width="20%">C#</td>
						</tr>
					</tbody></table>
				</td>
			</tr>
			<tr valign="top">
				<td height="163">
					<p><strong>package</strong> harding.compsci.graphics;
					</p>
					<p><br>
							<br><br><br>
							<br>
							<br>
							<br>
							<br>
							<br>
							<br>
							<br>
							<br>
							<span class="comment">// Import single class</span><br>
							<strong>import</strong> harding.compsci.graphics.Rectangle;
					</p>
					<p>
					<span class="comment">// Import all classes</span><br>
						<strong>import</strong> harding.compsci.graphics.*; &nbsp; 
					</p>
				</td>
				<td height="163">
					<p><strong>namespace</strong> Harding.Compsci.Graphics {<br>
						&nbsp; ...<br>
						}
					</p>
					<p><span class="comment">or</span>
					</p>
					<p><strong>namespace</strong> Harding {<br>
						&nbsp; <strong>namespace</strong> Compsci {<br>
						&nbsp;&nbsp;&nbsp; <strong>namespace</strong> Graphics {<br>
						&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ...<br>
						&nbsp;&nbsp;&nbsp; }<br>
						&nbsp; }<br>
						}
					</p>
					<p>
					<span class="comment">// Import single class</span><br>
					<b>using</b> Rectangle = Harding.CompSci.Graphics.Rectangle;  					
					</p>
					<p>
					<span class="comment">// Import all class</span><br>
					<strong>using</strong> Harding.Compsci.Graphics; 					
					</p>
				</td>
			</tr>
			
			<tr>
				<td colspan="2">
					<table class="header" id="Table13" width="100%" border="0">
						<tbody><tr align="center">
							<td class="heading2" width="20%">Java</td>
							<td class="heading" width="60%"><a name="classesinterfaces"></a>Classes / Interfaces</td>
							<td class="heading2" width="20%">C#</td>
						</tr>
					</tbody></table>
				</td>
			</tr>
			<tr valign="top">
				
    <td> <p><span class="comment">Accessibility keywords</span> <br>
        public<br>
        private<br>
        protected<br>
        static</p><br><br>
					<p><span class="comment">// Inheritance</span><br>
						<strong>class</strong> FootballGame <strong>extends</strong> Competition {<br>
						&nbsp; ...<br>
						}
					</p>
					<p><span class="comment">// Interface definition</span><br>
						<strong>interface</strong> IAlarmClock {<br>
						&nbsp; ...<br>
						}
					</p>
					<p><span class="comment">// Extending an interface&nbsp;</span><br>
						<strong>interface</strong> IAlarmClock <strong>extends</strong> IClock {<br>
						&nbsp; ...<br>
						}
					</p>
					<p><span class="comment">// Interface implementation</span><br>
						<strong>class</strong> WristWatch <strong>implements</strong> IAlarmClock, 
						ITimer {<br>
						&nbsp;&nbsp; ...<br>
						}
					</p>
				</td>
				
    <td> <p><span class="comment">Accessibility keywords</span> <br>
        public<br>
        private<br>
        internal<br>
        protected<br>
        protected internal<br>
        static</p>
      <p><span class="comment">// Inheritance</span><br>
        <strong>class</strong> FootballGame <strong>:</strong> Competition {<br>
        &nbsp; ...<br>
        } </p>
					<p><span class="comment">// Interface definition</span><br>
						<strong>interface</strong> IAlarmClock {<br>
						&nbsp; ...<br>
						}
					</p>
					<p><span class="comment">// Extending an interface&nbsp;</span><br>
						<strong>interface</strong> IAlarmClock : IClock {<br>
						&nbsp; ...<br>
						}
					</p>
					<p><span class="comment">// Interface implementation</span><br>
						<strong>class</strong> WristWatch <strong>:</strong> IAlarmClock, ITimer {<br>
						&nbsp;&nbsp; ...<br>
						}
					</p>
				</td>
			</tr>

			<tr align="center">
				<td colspan="2">
					<table class="header" id="Table14" width="100%" border="0">
						<tbody><tr align="center">
							<td class="heading2" width="20%">Java</td>
							<td class="heading" width="60%"><a name="constructorsdestructors"></a>Constructors / Destructors</td>
							<td class="heading2" width="20%">C#</td>
						</tr>
					</tbody></table>
				</td>
			</tr>
			<tr valign="top">
				<td height="176">
					<p>class SuperHero {
						<br>
						&nbsp; private int mPowerLevel;
					</p>
					<p>&nbsp; public SuperHero() {
						<br>
						&nbsp;&nbsp;&nbsp; mPowerLevel = 0;
						<br>
						&nbsp; }
					</p>
					<p>&nbsp; public SuperHero(int powerLevel) {
						<br>
						&nbsp;&nbsp;&nbsp; this.mPowerLevel= powerLevel;
						<br>
						&nbsp; }</p>
					<p>&nbsp; <span class="comment">// No destructors,&nbsp;just override the finalize 
							method</span><br>
						&nbsp; protected void <strong>finalize</strong>() throws Throwable {&nbsp;<br>
						&nbsp;&nbsp;&nbsp;&nbsp;super.finalize();&nbsp;&nbsp; <span class="comment">//&nbsp;Always 
							call&nbsp;parent's finalizer</span> &nbsp;
						<br>
						&nbsp; }<br>
						}</p>
				</td>
				<td height="176">
					<p>class SuperHero {<br>
						&nbsp; private int mPowerLevel;<br>
						<br>
						&nbsp; public SuperHero() {<br>
						&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mPowerLevel = 0;<br>
						&nbsp; }<br>
						<br>
						&nbsp; public SuperHero(int powerLevel) {<br>
						&nbsp;&nbsp;&nbsp; this.mPowerLevel= powerLevel;&nbsp;<br>
						&nbsp; }<br>
						<br>
						&nbsp; <strong>~</strong>SuperHero() {<br>
						&nbsp;&nbsp;&nbsp; <span class="comment">// Destructor code to free unmanaged 
							resources.<br>
							&nbsp;&nbsp;&nbsp; // Implicitly creates a Finalize method.</span><br>
						&nbsp; }<br>
						}</p>
				</td>
			</tr>
			
			<tr align="center">
				<td colspan="2">
					<table class="header" id="Table15" width="100%" border="0">
						<tbody><tr align="center">
							<td class="heading2" width="20%">Java</td>
							<td class="heading" width="60%"><a name="objects"></a>Objects</td>
							<td class="heading2" width="20%">C#</td>
						</tr>
					</tbody></table>
				</td>
			</tr>
			<tr valign="top">
				
    <td height="163"> <p>SuperHero hero = new SuperHero(); </p>
      <p> hero.setName("SpamMan"); <br>
        hero.setPowerLevel(3); <br>
        <br>
        hero.Defend("Laura Jones");<br>
        SuperHero.Rest(); &nbsp;<span class="comment">// Calling static method</span></p>
      <p> SuperHero hero2 = hero; &nbsp;&nbsp;<span class="comment">// Both refer 
        to same object</span> <br>
        hero2.setName("WormWoman"); <br>
        System.out.println(hero.getName()); &nbsp;<span class="comment">// Prints 
        WormWoman</span> <br>
        <br>
        hero = <strong>null</strong>; &nbsp;&nbsp;<span class="comment">// Free 
        the object</span> </p>
      <p>if (hero == <strong>null</strong>)<br>
        &nbsp;  hero = new SuperHero();</p>
      <p> Object obj = new SuperHero(); <br>
        System.out.println("object's type: " + obj.<strong>getClass()</strong>.toString()); 
        <br>
        if (obj <strong>instanceof</strong> SuperHero) <br>
        &nbsp; System.out.println("Is a SuperHero object.");</p></td>
				<td height="163">
					<p>SuperHero hero = new SuperHero(); <br>
        <br>
        hero.Name = "SpamMan"; <br>
        hero.PowerLevel = 3;</p>
      <p>hero.Defend("Laura Jones");<br>
        SuperHero.Rest();&nbsp;&nbsp; <span class="comment">// Calling static 
        method</span></p>
      <p>SuperHero hero2 = hero;&nbsp;&nbsp; <span class="comment">// Both refer 
        to same object</span> <br>
        hero2.Name = "WormWoman"; <br>
        Console.WriteLine(hero.Name);&nbsp;&nbsp; <span class="comment">// Prints 
        WormWoman</span></p>
      <p>hero = <strong>null</strong> ;&nbsp;&nbsp; <span class="comment">// Free 
        the object</span> </p>
      <p>if (hero == <strong>null</strong>)<br>
        &nbsp; hero = new SuperHero();</p>
					
      <p>Object obj = new SuperHero();&nbsp;<br>
        Console.WriteLine("object's type: " + obj.<strong>GetType()</strong>.ToString()); 
        <br>
        if (obj <strong>is</strong> SuperHero) <br>
        &nbsp; Console.WriteLine("Is a SuperHero object.");</p>
				</td>
			</tr>
			
			<tr><td colspan="2">
					<table class="header" id="Table16" width="100%" border="0">
						<tbody><tr align="center">
							<td class="heading2" width="20%">Java</td>
							<td class="heading" width="60%"><a name="properties"></a>Properties</td>
							<td class="heading2" width="20%">C#</td>
						</tr>
					</tbody></table>
				</td>
			</tr><tr valign="top">
				<td width="50%" height="134">
					<p>private int mSize;</p>
					<p>public int <strong>getSize</strong>() { return mSize; }
						<br>
						public void <strong>setSize</strong>(int value) {<br>
						&nbsp; if (value &lt; 0)
						<br>
						&nbsp; &nbsp; mSize = 0;
						<br>
						&nbsp; else
						<br>
						&nbsp; &nbsp; mSize = value;
						<br>
						}
					</p>
					<p><br>
						int s = shoe.getSize();<br>
						shoe.setSize(s+1);</p>
				</td>
				<td width="50%" height="134">
					<p>private int mSize;</p>
					<p>public int Size {
						<br>
						&nbsp; <strong>get</strong> { return mSize; }
						<br>
						&nbsp; <strong>set</strong> {
						<br>
						&nbsp; &nbsp; if (value &lt; 0)
						<br>
						&nbsp; &nbsp; &nbsp; mSize = 0;
						<br>
						&nbsp; &nbsp; else
						<br>
						&nbsp; &nbsp; &nbsp; mSize = value;
						<br>
						&nbsp; }
						<br>
						}
					</p>
					<p>
						shoe.Size++;
					</p>
				</td>
			</tr>
			
						<tr align="center">
				<td colspan="2">
					<table class="header" id="Table17" width="100%" border="0">
						<tbody><tr align="center">
							<td class="heading2" width="20%">Java</td>
							<td class="heading" width="60%"><a name="structs"></a>Structs</td>
							<td class="heading2" width="20%">C#</td>
						</tr>
					</tbody></table>
				</td>
			</tr>
			<tr valign="top">
				<td height="256"><i><font color="#008000"><br>
							<br>
						</font></i>
					<p>&nbsp;</p>
					<p><i><font color="#008000">No structs in Java.</font></i></p>
				</td>
				<td height="256"><strong>struct</strong> StudentRecord {<br>
					&nbsp; public string name;<br>
					&nbsp; public float gpa;<br>
					<br>
					&nbsp; public StudentRecord(string name, float gpa) {<br>
					&nbsp;&nbsp;&nbsp; this.name = name;<br>
					&nbsp;&nbsp;&nbsp; this.gpa = gpa;<br>
					&nbsp; }<br>
					}<br>
					<br>
					StudentRecord stu = new StudentRecord("Bob", 3.5f);<br>
					StudentRecord stu2 = stu;&nbsp;&nbsp;<br>
					<br>
					stu2.name = "Sue";<br>
					Console.WriteLine(stu.name);&nbsp;&nbsp;&nbsp; <span class="comment">// Prints 
						"Bob"</span><br>
					Console.WriteLine(stu2.name);&nbsp;&nbsp; <span class="comment">// Prints "Sue"</span></td>
			</tr>
			
			<tr align="center">
				<td colspan="2">
					<table class="header" id="Table18" width="100%" border="0">
						<tbody><tr align="center">
							<td class="heading2" width="20%">Java</td>
							<td class="heading" width="60%"><a name="consoleio"></a>Console I/O</td>
							<td class="heading2" width="20%">C#</td>
						</tr>
					</tbody></table>
				</td>
			</tr>
			<tr valign="top">
				<td width="50%" height="163">java.io.DataInput in = new 
					java.io.DataInputStream(System.in);<br>
					System.out.print("What is your name? ");<br>
					String name = in.readLine();<br>
					System.out.print("How old are you? ");<br>
					int age = Integer.parseInt(in.readLine());<br>
					System.out.println(name + " is " + age + " years old.");
					
      <p><br>
        int c = System.in.read();&nbsp;&nbsp; <span class="comment">// Read single 
        char</span><br>
        System.out.println(c);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span class="comment">// 
        Prints 65 if user enters "A"</span></p>
      <p><span class="comment">// The studio costs $499.00 for 3 months.</span><br>
        System.out.printf("The %s costs $%.2f for %d months.%n", "studio", 
        499.0, 3);</p>
      <p><span class="comment">// Today is 06/25/04</span><br>
        System.out.printf("Today is %tD\n", new java.util.Date());</p>
      </td>
				<td width="50%" height="163">Console.Write("What's your name? ");<br>
					string name = Console.ReadLine();<br>
					Console.Write("How old are you? ");<br>
					int age = Convert.ToInt32(Console.ReadLine());<br>
					Console.WriteLine("{0} is {1} years old.", name, age);<br>
					<span class="comment">// or</span><br>
					Console.WriteLine(name + " is " + age + " years old.");
					
      <p>int c = Console.Read();&nbsp; <span class="comment">// Read single char</span><br>
        Console.WriteLine(c);&nbsp;&nbsp;&nbsp; <span class="comment">// Prints 
        65 if user enters "A"</span></p>
      <p><span class="comment">// The studio costs $499.00 for 3 months.</span><br>
        Console.WriteLine("The {0} costs {1:C} for {2} months.\n", "studio", 
        499.0, 3);</p>
      <p><span class="comment">// Today is 06/25/2004</span><br>
        Console.WriteLine("Today is " + DateTime.Now.ToShortDateString()); 
      </p>
      </td>
			</tr>
			<tr align="center">
				<td colspan="2">
					<table class="header" id="Table19" width="100%" border="0">
						<tbody><tr align="center">
							<td class="heading2" width="20%">Java</td>
							<td class="heading" width="60%"><a name="fileio"></a>File I/O</td>
							<td class="heading2" width="20%">C#</td>
						</tr>
					</tbody></table>
				</td>
			</tr>
			<tr valign="top">
				
    <td width="50%" height="163"> <p>import java.io.*;</p>
					<p>
					<span class="comment">// Character stream writing</span><br>
					<strong>FileWriter</strong> writer = new FileWriter("c:\\myfile.txt");<br>
        writer.write("Out to file.\n");<br>
        writer.close();</p>
					
      <p><span class="comment">// Character stream reading</span><br>
	  <strong>FileReader</strong> reader = new FileReader("c:\\myfile.txt");<br>
        <strong>BufferedReader</strong> br = new BufferedReader(reader);<br>
        String line = br.readLine(); <br>
        while (line != null) {<br>
        &nbsp; System.out.println(line); <br>
        &nbsp; line = br.readLine(); <br>
        } <br>
        reader.close(); </p>
					
      <p><span class="comment">// Binary stream writing</span><br>
	  <strong>FileOutputStream</strong> out = new FileOutputStream("c:\\myfile.dat");<br>
        out.write("Text data".getBytes());<br>
        out.write(123);<br>
        out.close();</p>
					
      <p>
	  <span class="comment">// Binary stream reading</span><br>
	  <strong>FileInputStream</strong> in = new FileInputStream("c:\\myfile.dat");<br>
        byte buff[] = new byte[9];<br>
        in.read(buff, 0, 9); &nbsp;&nbsp;<span class="comment">// Read first 9 bytes into buff</span><br>
        String s = new String(buff);<br>
        int num = in.read();  &nbsp;&nbsp;<span class="comment">// Next is 123</span><br>
        in.close();</p>
				</td>
				<td width="50%" height="163">
					<p>using System.IO;</p>
					<p><span class="comment">// Character stream writing</span><br>
					<strong>StreamWriter</strong> writer = File.CreateText("c:\\myfile.txt");
						<br>
						writer.WriteLine("Out to file.");
						<br>
						writer.Close();
					</p>
					<p>
					<span class="comment">// Character stream reading</span><br>
					<strong>StreamReader</strong> reader = File.OpenText("c:\\myfile.txt");
						<br>
						string line = reader.ReadLine();
						<br>
						while (line != null) {<br>
						&nbsp; Console.WriteLine(line);
						<br>
						&nbsp; line = reader.ReadLine();
						<br>
						}
						<br>
						reader.Close();
					</p>
					
      <p><span class="comment"><br>
        // Binary stream writing</span><br>
        <strong>BinaryWriter</strong> out = new BinaryWriter(File.OpenWrite("c:\\myfile.dat")); 
        <br>
        out.Write("Text data"); <br>
        out.Write(123); <br>
        out.Close(); </p>
					
      <p><span class="comment">// Binary stream reading</span><br>
	  <strong>BinaryReader</strong> in = new BinaryReader(File.OpenRead("c:\\myfile.dat")); 
        <br>
        string s = in.ReadString(); <br>
        int num = in.ReadInt32(); <br>
        in.Close();</p>
				</td>
			</tr>
		</tbody></table>
		<p align="center" style="FONT-SIZE:xx-small; BACKGROUND-COLOR:rgb(230,230,230)">
Page last modified:
				<script>document.writeln(document.lastModified)</script>02/01/2011 06:45:24

				<br><br>
				
				<!-- Creative Commons License -->
<a rel="license" href="http://creativecommons.org/licenses/by-sa/2.0/"><img alt="Creative Commons License" border="0" src="./Java and C# Comparison_files/somerights20.gif"></a><br>
This work is licensed under a <a rel="license" href="http://creativecommons.org/licenses/by-sa/2.0/">Creative Commons License</a>.
<!-- /Creative Commons License -->
<br><br>
Please send any corrections or comments to <a href="mailto:fmccown@harding.edu">
					fmccown@harding.edu</a>.<br><br>
				<a href="http://www.harding.edu/fmccown/" style="font-size:14">Home</a>
		</p>


<script src="./Java and C# Comparison_files/urchin.js" type="text/javascript">
</script>
<script type="text/javascript">
_uacct = "UA-582626-3";
urchinTracker();
</script>

<!--

<rdf:RDF xmlns="http://web.resource.org/cc/"
    xmlns:dc="http://purl.org/dc/elements/1.1/"
    xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
<Work rdf:about="">
   <dc:title>Java and C# Comparison</dc:title>
   <dc:date>2004</dc:date>
   <dc:description>A summary comparison of the Java and C# programming languages.</dc:description>
   <dc:creator><Agent>
      <dc:title>Frank McCown</dc:title>
   </Agent></dc:creator>
   <dc:rights><Agent>
      <dc:title>Frank McCown</dc:title>
   </Agent></dc:rights>
   <dc:type rdf:resource="http://purl.org/dc/dcmitype/Text" />
   <dc:source rdf:resource="http://www.harding.edu/USER/fmccown/WWW/java_csharp_comparison.html"/>
   <license rdf:resource="http://creativecommons.org/licenses/by-sa/2.0/" />
</Work>

<License rdf:about="http://creativecommons.org/licenses/by-sa/2.0/">
   <permits rdf:resource="http://web.resource.org/cc/Reproduction" />
   <permits rdf:resource="http://web.resource.org/cc/Distribution" />
   <requires rdf:resource="http://web.resource.org/cc/Notice" />
   <requires rdf:resource="http://web.resource.org/cc/Attribution" />
   <permits rdf:resource="http://web.resource.org/cc/DerivativeWorks" />
   <requires rdf:resource="http://web.resource.org/cc/ShareAlike" />
</License>

</rdf:RDF>

-->
	

</body></html>